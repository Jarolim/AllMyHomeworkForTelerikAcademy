--1. Create a database with two tables: Persons(Id(PK), FirstName, LastName, SSN) 
--and Accounts(Id(PK), PersonId(FK), Balance). Insert few records for testing. 
--Write a stored procedure that selects the full names of all persons.

CREATE TABLE Persons(
        PersonId INT PRIMARY KEY IDENTITY,
        FirstName VARCHAR(50),
        LastName VARCHAR(50),
        SSN INT NOT NULL
)
 
CREATE TABLE Accounts(
        Id INT PRIMARY KEY IDENTITY,
        PersonID INT NOT NULL FOREIGN KEY REFERENCES Persons(PersonID),
        Balance INT NOT NULL,
)
 
 
INSERT INTO Persons
VALUES
        ('John','Snow',12354),
        ('Ned', 'Stark', 16516),
        ('Samuel', 'Jackson', 51616),
        ('Pepi', 'Cooper',9 8486),
 
CREATE PROCEDURE usp_Select_All_Persons AS
        SELECT FirstName + ' ' + LastName AS [FULL Name]
        FROM Persons
GO
 
EXEC usp_Select_All_Persons

------------------------------------------------------------------------------

--2. Create a stored procedure that accepts a number as a parameter and returns 
--all persons who have more money in their accounts than the supplied number.

CREATE PROCEDURE uspBalanceHigherThan @balance money
AS
SELECT * FROM Persons pers
JOIN Accounts acc
ON pers.PersonId = acc.PersonId
WHERE acc.Balance > @balance
GO

EXEC uspBalanceHigherThan 300

------------------------------------------------------------------------------
--3. Create a function that accepts as parameters – sum, yearly interest 
--rate and number of months. It should calculate and return the new sum. 
--Write a SELECT to test whether the function works as expected.

CREATE FUNCTION ufn_CalculateRemunerated2(@sum money,@interestRate int,@months int)
RETURNS money
AS
BEGIN
	DECLARE @result money
	SET @result = @sum + (@months/12.0)*((@interestRate*@sum)/100)
	return @result
END
GO

SELECT dbo.ufn_CalculateRemunerated2(100, 10, 110) AS [new sum]
GO

------------------------------------------------------------------------------
--4.Create a stored procedure that uses the function from the previous
-- example to give an interest to a person's account for one month. 
--It should take the AccountId and the interest rate as parameters.

CREATE PROC dbo.usp_GiveInterest (
        @id INT = 4,
        @interest INT,
        @RESULT money OUTPUT
        )
 
        AS
 
        DECLARE @sumz money
        SET @sumz = (SELECT a.Balance
                        FROM dbo.Accounts a
                                INNER JOIN dbo.Persons p
                                ON p.PersonID = a.PersonID
                                        AND p.PersonID = @id)
   
        EXEC usp_CalculateNewSum
                @sumz,
                @interest,
                24,
                @RESULT OUTPUT         
        GO
       
DECLARE @final money
EXEC usp_GiveInterest 1, 10, @final OUTPUT
SELECT @final

------------------------------------------------------------------------------
--5. Add two more stored procedures WithdrawMoney( AccountId, money)
 -- and DepositMoney (AccountId, money) that operate in transactions.
 
 CREATE PROC dbo.usp_WithdrawMoney (
        @AccountID INT,
        @money money,
        @RESULT money OUTPUT
)
AS
        DECLARE @curBalance money
        SET @curBalance = (
                SELECT a.Balance
                FROM dbo.Accounts a
                WHERE a.AccountID = @AccountID
                )
        SET @RESULT = @curBalance - @money
        UPDATE dbo.Accounts
                SET Balance = @RESULT
                WHERE(Accounts.AccountID = @AccountID)
GO
 
DECLARE @answer money
EXEC usp_WithdrawMoney 1, 50, @answer OUTPUT
SELECT @answer
 
------------------
 
CREATE PROC dbo.usp_DepositMoney (
        @AccountID INT,
        @money money,
        @RESULT money OUTPUT
)
AS
        DECLARE @curBalance money
        SET @curBalance = (
                SELECT a.Balance
                FROM dbo.Accounts a
                WHERE a.AccountID = @AccountID
                )
        SET @RESULT = @curBalance + @money
        UPDATE dbo.Accounts
                SET Balance = @RESULT
                WHERE(Accounts.AccountID = @AccountID)
GO
 
DECLARE @answer money
EXEC usp_DepositMoney 1, 50, @answer OUTPUT
SELECT @answer

------------------------------------------------------------------------------
--6.Create another table – Logs(LogID, AccountID, OldSum, NewSum). 
--Add a trigger to the Accounts table that enters a new entry into the 
--Logs table every time the sum on an account changes.

CREATE TABLE Logs(
        LogID INT IDENTITY,
        AccountID INT,
        NewSum money,
        CONSTRAINT PK_LogID PRIMARY KEY(LogID),
        CONSTRAINT FK_AccountID FOREIGN KEY(AccountID)
                REFERENCES Accounts(AccountID)
)
 
CREATE TRIGGER tr_AccountsUpdate ON dbo.Accounts FOR UPDATE
AS
        BEGIN
        INSERT INTO dbo.Logs
                SELECT a.AccountID AS AccountID,
                a.Balance AS NewSum
        FROM inserted a
        END
GO
DECLARE @answer money
EXEC usp_WithdrawMoney 4, 50, @answer OUTPUT
SELECT @answer
