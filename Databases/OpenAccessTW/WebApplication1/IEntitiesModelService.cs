#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Code is generated by Telerik Add OpenAccess Service Wizard
// using PlainIDataService.tt template

namespace WebApplication1
{
	using System.ServiceModel;
	using WebApplication1.Dto;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

	/// <summary>
	/// EntitiesModelService interface.
	/// </summary>
	[ServiceContract]
	public interface IEntitiesModelService
	{
	    #region Cars CRUD Operations
	
	    /// <summary>
	    /// Returns all cars.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CarDto> ReadCars();
	
	    /// <summary>
	    /// Returns a specified amount of cars from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CarDto> ReadCarsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all cars filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CarDto> ReadCarsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of cars from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CarDto> ReadCarsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a car with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CarDto ReadCar(string dtoKey);
	
	    /// <summary>
	    /// Returns all cars count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CarsCount();
	
	    /// <summary>
	    /// Returns all cars count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CarsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Updates car in the database from the given dto object.
	    /// </summary>
	    /// <param name="car">The dto object.</param>
	    [OperationContract]
	    void UpdateCar(CarDto car);
	
	    /// <summary>
	    /// Update an existing cars in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cars">The dto object list.</param>
	    [OperationContract]
	    void UpdateCars(IEnumerable<CarDto> cars);
	
	    /// <summary>
	    /// Deletes car from the database by the given dto object.
	    /// </summary>
	    /// <param name="car">The dto object.</param>
	    [OperationContract]
	    void DeleteCar(CarDto car);
	
	    /// <summary>
	    /// Delete cars from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cars">The dto object list.</param>
	    [OperationContract]
	    void DeleteCars(IEnumerable<CarDto> cars);
	    
	    #endregion
	    
	    #region Categories CRUD Operations
	
	    /// <summary>
	    /// Returns all categories.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CategoryDto> ReadCategories();
	
	    /// <summary>
	    /// Returns a specified amount of categories from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CategoryDto> ReadCategoriesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all categories filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CategoryDto> ReadCategoriesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of categories from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CategoryDto> ReadCategoriesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a category with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CategoryDto ReadCategory(string dtoKey);
	
	    /// <summary>
	    /// Returns all categories count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CategoriesCount();
	
	    /// <summary>
	    /// Returns all categories count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CategoriesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new category from the given dto object into the database.
	    /// </summary>
	    /// <param name="category">The dto object.</param>
	    /// <returns>The dto key of the newly created category.</returns>
	    [OperationContract]
	    string CreateCategory(CategoryDto category);
	
	    /// <summary>
	    /// Deletes category from the database by the given dto object.
	    /// </summary>
	    /// <param name="category">The dto object.</param>
	    [OperationContract]
	    void DeleteCategory(CategoryDto category);
	
	    /// <summary>
	    /// Delete categories from the database by the given dto object list.
	    /// </summary>
	    /// <param name="categories">The dto object list.</param>
	    [OperationContract]
	    void DeleteCategories(IEnumerable<CategoryDto> categories);
	    
	    #endregion
	    
	    #region Customers CRUD Operations
	
	    /// <summary>
	    /// Returns all customers.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CustomerDto> ReadCustomers();
	
	    /// <summary>
	    /// Returns a specified amount of customers from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CustomerDto> ReadCustomersPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all customers filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CustomerDto> ReadCustomersFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of customers from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CustomerDto> ReadCustomersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a customer with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CustomerDto ReadCustomer(string dtoKey);
	
	    /// <summary>
	    /// Returns all customers count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CustomersCount();
	
	    /// <summary>
	    /// Returns all customers count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CustomersCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new customer from the given dto object into the database.
	    /// </summary>
	    /// <param name="customer">The dto object.</param>
	    /// <returns>The dto key of the newly created customer.</returns>
	    [OperationContract]
	    string CreateCustomer(CustomerDto customer);
	
	    /// <summary>
	    /// Updates customer in the database from the given dto object.
	    /// </summary>
	    /// <param name="customer">The dto object.</param>
	    [OperationContract]
	    void UpdateCustomer(CustomerDto customer);
	
	    /// <summary>
	    /// Update an existing customers in the database from the given dto object list.
	    /// </summary>
	    /// <param name="customers">The dto object list.</param>
	    [OperationContract]
	    void UpdateCustomers(IEnumerable<CustomerDto> customers);
	    
	    #endregion
	    
	    #region Employees CRUD Operations
	
	    /// <summary>
	    /// Returns all employees.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<EmployeeDto> ReadEmployees();
	
	    /// <summary>
	    /// Returns a specified amount of employees from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<EmployeeDto> ReadEmployeesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all employees filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<EmployeeDto> ReadEmployeesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of employees from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<EmployeeDto> ReadEmployeesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a employee with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    EmployeeDto ReadEmployee(string dtoKey);
	
	    /// <summary>
	    /// Returns all employees count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int EmployeesCount();
	
	    /// <summary>
	    /// Returns all employees count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int EmployeesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new employee from the given dto object into the database.
	    /// </summary>
	    /// <param name="employee">The dto object.</param>
	    /// <returns>The dto key of the newly created employee.</returns>
	    [OperationContract]
	    string CreateEmployee(EmployeeDto employee);
	
	    /// <summary>
	    /// Updates employee in the database from the given dto object.
	    /// </summary>
	    /// <param name="employee">The dto object.</param>
	    [OperationContract]
	    void UpdateEmployee(EmployeeDto employee);
	
	    /// <summary>
	    /// Update an existing employees in the database from the given dto object list.
	    /// </summary>
	    /// <param name="employees">The dto object list.</param>
	    [OperationContract]
	    void UpdateEmployees(IEnumerable<EmployeeDto> employees);
	
	    /// <summary>
	    /// Deletes employee from the database by the given dto object.
	    /// </summary>
	    /// <param name="employee">The dto object.</param>
	    [OperationContract]
	    void DeleteEmployee(EmployeeDto employee);
	
	    /// <summary>
	    /// Delete employees from the database by the given dto object list.
	    /// </summary>
	    /// <param name="employees">The dto object list.</param>
	    [OperationContract]
	    void DeleteEmployees(IEnumerable<EmployeeDto> employees);
	    
	    #endregion
	    
	    #region RentalOrders CRUD Operations
	
	    /// <summary>
	    /// Returns all rentalorders.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RentalOrderDto> ReadRentalOrders();
	
	    /// <summary>
	    /// Returns a specified amount of rentalorders from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RentalOrderDto> ReadRentalOrdersPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all rentalorders filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RentalOrderDto> ReadRentalOrdersFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of rentalorders from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RentalOrderDto> ReadRentalOrdersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a rentalorder with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RentalOrderDto ReadRentalOrder(string dtoKey);
	
	    /// <summary>
	    /// Returns all rentalorders count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RentalOrdersCount();
	
	    /// <summary>
	    /// Returns all rentalorders count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RentalOrdersCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new rentalorder from the given dto object into the database.
	    /// </summary>
	    /// <param name="rentalorder">The dto object.</param>
	    /// <returns>The dto key of the newly created rentalorder.</returns>
	    [OperationContract]
	    string CreateRentalOrder(RentalOrderDto rentalorder);
	
	    /// <summary>
	    /// Updates rentalorder in the database from the given dto object.
	    /// </summary>
	    /// <param name="rentalorder">The dto object.</param>
	    [OperationContract]
	    void UpdateRentalOrder(RentalOrderDto rentalorder);
	
	    /// <summary>
	    /// Update an existing rentalorders in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rentalorders">The dto object list.</param>
	    [OperationContract]
	    void UpdateRentalOrders(IEnumerable<RentalOrderDto> rentalorders);
	
	    /// <summary>
	    /// Deletes rentalorder from the database by the given dto object.
	    /// </summary>
	    /// <param name="rentalorder">The dto object.</param>
	    [OperationContract]
	    void DeleteRentalOrder(RentalOrderDto rentalorder);
	
	    /// <summary>
	    /// Delete rentalorders from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rentalorders">The dto object list.</param>
	    [OperationContract]
	    void DeleteRentalOrders(IEnumerable<RentalOrderDto> rentalorders);
	    
	    #endregion
	    
	    #region RentalRates CRUD Operations
	
	    /// <summary>
	    /// Returns all rentalrates.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RentalRateDto> ReadRentalRates();
	
	    /// <summary>
	    /// Returns a specified amount of rentalrates from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RentalRateDto> ReadRentalRatesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all rentalrates filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RentalRateDto> ReadRentalRatesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of rentalrates from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RentalRateDto> ReadRentalRatesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a rentalrate with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RentalRateDto ReadRentalRate(string dtoKey);
	
	    /// <summary>
	    /// Returns all rentalrates count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RentalRatesCount();
	
	    /// <summary>
	    /// Returns all rentalrates count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RentalRatesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new rentalrate from the given dto object into the database.
	    /// </summary>
	    /// <param name="rentalrate">The dto object.</param>
	    /// <returns>The dto key of the newly created rentalrate.</returns>
	    [OperationContract]
	    string CreateRentalRate(RentalRateDto rentalrate);
	
	    /// <summary>
	    /// Updates rentalrate in the database from the given dto object.
	    /// </summary>
	    /// <param name="rentalrate">The dto object.</param>
	    [OperationContract]
	    void UpdateRentalRate(RentalRateDto rentalrate);
	
	    /// <summary>
	    /// Update an existing rentalrates in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rentalrates">The dto object list.</param>
	    [OperationContract]
	    void UpdateRentalRates(IEnumerable<RentalRateDto> rentalrates);
	
	    /// <summary>
	    /// Deletes rentalrate from the database by the given dto object.
	    /// </summary>
	    /// <param name="rentalrate">The dto object.</param>
	    [OperationContract]
	    void DeleteRentalRate(RentalRateDto rentalrate);
	
	    /// <summary>
	    /// Delete rentalrates from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rentalrates">The dto object list.</param>
	    [OperationContract]
	    void DeleteRentalRates(IEnumerable<RentalRateDto> rentalrates);
	    
	    #endregion
	    
	}
}
#pragma warning restore 1591
