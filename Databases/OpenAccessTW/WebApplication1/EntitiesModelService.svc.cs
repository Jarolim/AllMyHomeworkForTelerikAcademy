#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Code is generated by Telerik Add OpenAccess Service Wizard
// using PlainDataService.tt template
    
namespace WebApplication1
{
	using System.ServiceModel;
	using WebApplication1.Dto;
	using WebApplication1.Assemblers;
	using WebApplication1.Repositories;
	using WebApplication1.Services;
	using OpenAccessModel9;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

	/// <summary>
	/// EntitiesModelService service class handler.
	/// </summary>
	[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
	public partial class EntitiesModelService : IEntitiesModelService
	{
	    /// <summary>
	    /// Maintains a list of objects affected by a business transaction and coordinates 
	    /// the writing out of changes and the resolution of concurrency problems.
	    /// </summary>
	    private IEntitiesModelUnitOfWork unitOfWork;
	    
	    /// <summary>
	    /// Get or sets the specific UnitOfWork. It maintains a list of objects affected 
	    /// by a business transaction and coordinates the writing out of changes and the resolution of concurrency problems.
	    /// </summary>
	    public IEntitiesModelUnitOfWork UnitOfWork
	    {
	        get
	        {
	            if(this.unitOfWork == null)
	            {
	                this.unitOfWork = new EntitiesModel();
	            }
	            return this.unitOfWork;
	        }
	        set
	        {
	            this.unitOfWork = value;
	        }
	    }	
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Car entity.
	    /// </summary>
	    private ICarService carservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Car entity.
	    /// </summary>
	    public virtual ICarService CarService
	    {
	        get
	        {
	            if (this.carservice == null)
	            {
	                ICarAssembler assembler = new CarAssembler();
	                ICarRepository repository = new CarRepository(this.UnitOfWork);
	
	                this.carservice = new CarService(assembler, repository);
	            }
	            return this.carservice;
	        }
	    }
	        
	    #region Cars CRUD Operations
	
	    /// <summary>
	    /// Returns all cars.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CarDto> ReadCars()	
	    {
	        return this.CarService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cars from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CarDto> ReadCarsPaged(int startIndex, int pageSize)
	    {
	        return this.CarService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all cars filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CarDto> ReadCarsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CarService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cars from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CarDto> ReadCarsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CarService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a car with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CarDto ReadCar(string dtoKey)
	    {
	        return this.CarService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all cars count.
	    /// </summary>
	    /// <returns></returns>
	    public int CarsCount()
	    {
	        return this.CarService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all cars count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CarsCountFiltered(string filterExpression)
	    {
	        return this.CarService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Updates an existing car in the database from the given dto object.
	    /// </summary>
	    /// <param name="car">The dto object.</param>
	    public void UpdateCar(CarDto car)
	    {
	        this.CarService.Update(car);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update cars in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cars">The dto object list.</param>
	    public void UpdateCars(IEnumerable<CarDto> cars)
	    {
	        if (cars == null)
	        {
	            return;
	        }
	
	        foreach (CarDto car in cars)
	        {
	            if (car == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCar(car);
	        }
	    }
	
	    /// <summary>
	    /// Deletes car from the database by the given dto object.
	    /// </summary>
	    /// <param name="car">The dto object.</param>
	    public void DeleteCar(CarDto car)
	    {
	        this.CarService.Delete(car);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete cars from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cars">The dto object list.</param>
	    public void DeleteCars(IEnumerable<CarDto> cars)
	    {
	        if (cars == null)
	        {
	            return;
	        }
	
	        foreach (CarDto car in cars)
	        {
	            if (car == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCar(car);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Category entity.
	    /// </summary>
	    private ICategoryService categoryservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Category entity.
	    /// </summary>
	    public virtual ICategoryService CategoryService
	    {
	        get
	        {
	            if (this.categoryservice == null)
	            {
	                ICategoryAssembler assembler = new CategoryAssembler();
	                ICategoryRepository repository = new CategoryRepository(this.UnitOfWork);
	
	                this.categoryservice = new CategoryService(assembler, repository);
	            }
	            return this.categoryservice;
	        }
	    }
	        
	    #region Categories CRUD Operations
	
	    /// <summary>
	    /// Returns all categories.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CategoryDto> ReadCategories()	
	    {
	        return this.CategoryService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of categories from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CategoryDto> ReadCategoriesPaged(int startIndex, int pageSize)
	    {
	        return this.CategoryService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all categories filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CategoryDto> ReadCategoriesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CategoryService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of categories from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CategoryDto> ReadCategoriesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CategoryService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a category with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CategoryDto ReadCategory(string dtoKey)
	    {
	        return this.CategoryService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all categories count.
	    /// </summary>
	    /// <returns></returns>
	    public int CategoriesCount()
	    {
	        return this.CategoryService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all categories count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CategoriesCountFiltered(string filterExpression)
	    {
	        return this.CategoryService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new category from the given dto object into the database.
	    /// </summary>
	    /// <param name="category">The dto object.</param>
	    /// <returns>The dto key of the newly created category.</returns>
	    public string CreateCategory(CategoryDto category)
	    {
	        string key = this.CategoryService.Add(category);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Deletes category from the database by the given dto object.
	    /// </summary>
	    /// <param name="category">The dto object.</param>
	    public void DeleteCategory(CategoryDto category)
	    {
	        this.CategoryService.Delete(category);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete categories from the database by the given dto object list.
	    /// </summary>
	    /// <param name="categories">The dto object list.</param>
	    public void DeleteCategories(IEnumerable<CategoryDto> categories)
	    {
	        if (categories == null)
	        {
	            return;
	        }
	
	        foreach (CategoryDto category in categories)
	        {
	            if (category == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCategory(category);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Customer entity.
	    /// </summary>
	    private ICustomerService customerservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Customer entity.
	    /// </summary>
	    public virtual ICustomerService CustomerService
	    {
	        get
	        {
	            if (this.customerservice == null)
	            {
	                ICustomerAssembler assembler = new CustomerAssembler();
	                ICustomerRepository repository = new CustomerRepository(this.UnitOfWork);
	
	                this.customerservice = new CustomerService(assembler, repository);
	            }
	            return this.customerservice;
	        }
	    }
	        
	    #region Customers CRUD Operations
	
	    /// <summary>
	    /// Returns all customers.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CustomerDto> ReadCustomers()	
	    {
	        return this.CustomerService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of customers from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CustomerDto> ReadCustomersPaged(int startIndex, int pageSize)
	    {
	        return this.CustomerService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all customers filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CustomerDto> ReadCustomersFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CustomerService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of customers from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CustomerDto> ReadCustomersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CustomerService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a customer with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CustomerDto ReadCustomer(string dtoKey)
	    {
	        return this.CustomerService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all customers count.
	    /// </summary>
	    /// <returns></returns>
	    public int CustomersCount()
	    {
	        return this.CustomerService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all customers count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CustomersCountFiltered(string filterExpression)
	    {
	        return this.CustomerService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new customer from the given dto object into the database.
	    /// </summary>
	    /// <param name="customer">The dto object.</param>
	    /// <returns>The dto key of the newly created customer.</returns>
	    public string CreateCustomer(CustomerDto customer)
	    {
	        string key = this.CustomerService.Add(customer);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing customer in the database from the given dto object.
	    /// </summary>
	    /// <param name="customer">The dto object.</param>
	    public void UpdateCustomer(CustomerDto customer)
	    {
	        this.CustomerService.Update(customer);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update customers in the database from the given dto object list.
	    /// </summary>
	    /// <param name="customers">The dto object list.</param>
	    public void UpdateCustomers(IEnumerable<CustomerDto> customers)
	    {
	        if (customers == null)
	        {
	            return;
	        }
	
	        foreach (CustomerDto customer in customers)
	        {
	            if (customer == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCustomer(customer);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Employee entity.
	    /// </summary>
	    private IEmployeeService employeeservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Employee entity.
	    /// </summary>
	    public virtual IEmployeeService EmployeeService
	    {
	        get
	        {
	            if (this.employeeservice == null)
	            {
	                IEmployeeAssembler assembler = new EmployeeAssembler();
	                IEmployeeRepository repository = new EmployeeRepository(this.UnitOfWork);
	
	                this.employeeservice = new EmployeeService(assembler, repository);
	            }
	            return this.employeeservice;
	        }
	    }
	        
	    #region Employees CRUD Operations
	
	    /// <summary>
	    /// Returns all employees.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<EmployeeDto> ReadEmployees()	
	    {
	        return this.EmployeeService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of employees from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<EmployeeDto> ReadEmployeesPaged(int startIndex, int pageSize)
	    {
	        return this.EmployeeService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all employees filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<EmployeeDto> ReadEmployeesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.EmployeeService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of employees from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<EmployeeDto> ReadEmployeesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.EmployeeService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a employee with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public EmployeeDto ReadEmployee(string dtoKey)
	    {
	        return this.EmployeeService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all employees count.
	    /// </summary>
	    /// <returns></returns>
	    public int EmployeesCount()
	    {
	        return this.EmployeeService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all employees count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int EmployeesCountFiltered(string filterExpression)
	    {
	        return this.EmployeeService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new employee from the given dto object into the database.
	    /// </summary>
	    /// <param name="employee">The dto object.</param>
	    /// <returns>The dto key of the newly created employee.</returns>
	    public string CreateEmployee(EmployeeDto employee)
	    {
	        string key = this.EmployeeService.Add(employee);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing employee in the database from the given dto object.
	    /// </summary>
	    /// <param name="employee">The dto object.</param>
	    public void UpdateEmployee(EmployeeDto employee)
	    {
	        this.EmployeeService.Update(employee);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update employees in the database from the given dto object list.
	    /// </summary>
	    /// <param name="employees">The dto object list.</param>
	    public void UpdateEmployees(IEnumerable<EmployeeDto> employees)
	    {
	        if (employees == null)
	        {
	            return;
	        }
	
	        foreach (EmployeeDto employee in employees)
	        {
	            if (employee == null)
	            {
	                continue;
	            }
	            
	            this.UpdateEmployee(employee);
	        }
	    }
	
	    /// <summary>
	    /// Deletes employee from the database by the given dto object.
	    /// </summary>
	    /// <param name="employee">The dto object.</param>
	    public void DeleteEmployee(EmployeeDto employee)
	    {
	        this.EmployeeService.Delete(employee);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete employees from the database by the given dto object list.
	    /// </summary>
	    /// <param name="employees">The dto object list.</param>
	    public void DeleteEmployees(IEnumerable<EmployeeDto> employees)
	    {
	        if (employees == null)
	        {
	            return;
	        }
	
	        foreach (EmployeeDto employee in employees)
	        {
	            if (employee == null)
	            {
	                continue;
	            }
	            
	            this.DeleteEmployee(employee);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against RentalOrder entity.
	    /// </summary>
	    private IRentalOrderService rentalorderservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against RentalOrder entity.
	    /// </summary>
	    public virtual IRentalOrderService RentalOrderService
	    {
	        get
	        {
	            if (this.rentalorderservice == null)
	            {
	                IRentalOrderAssembler assembler = new RentalOrderAssembler();
	                IRentalOrderRepository repository = new RentalOrderRepository(this.UnitOfWork);
	
	                this.rentalorderservice = new RentalOrderService(assembler, repository);
	            }
	            return this.rentalorderservice;
	        }
	    }
	        
	    #region RentalOrders CRUD Operations
	
	    /// <summary>
	    /// Returns all rentalorders.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RentalOrderDto> ReadRentalOrders()	
	    {
	        return this.RentalOrderService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rentalorders from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RentalOrderDto> ReadRentalOrdersPaged(int startIndex, int pageSize)
	    {
	        return this.RentalOrderService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all rentalorders filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RentalOrderDto> ReadRentalOrdersFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RentalOrderService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rentalorders from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RentalOrderDto> ReadRentalOrdersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RentalOrderService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a rentalorder with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RentalOrderDto ReadRentalOrder(string dtoKey)
	    {
	        return this.RentalOrderService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all rentalorders count.
	    /// </summary>
	    /// <returns></returns>
	    public int RentalOrdersCount()
	    {
	        return this.RentalOrderService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all rentalorders count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RentalOrdersCountFiltered(string filterExpression)
	    {
	        return this.RentalOrderService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new rentalorder from the given dto object into the database.
	    /// </summary>
	    /// <param name="rentalorder">The dto object.</param>
	    /// <returns>The dto key of the newly created rentalorder.</returns>
	    public string CreateRentalOrder(RentalOrderDto rentalorder)
	    {
	        string key = this.RentalOrderService.Add(rentalorder);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing rentalorder in the database from the given dto object.
	    /// </summary>
	    /// <param name="rentalorder">The dto object.</param>
	    public void UpdateRentalOrder(RentalOrderDto rentalorder)
	    {
	        this.RentalOrderService.Update(rentalorder);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update rentalorders in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rentalorders">The dto object list.</param>
	    public void UpdateRentalOrders(IEnumerable<RentalOrderDto> rentalorders)
	    {
	        if (rentalorders == null)
	        {
	            return;
	        }
	
	        foreach (RentalOrderDto rentalorder in rentalorders)
	        {
	            if (rentalorder == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRentalOrder(rentalorder);
	        }
	    }
	
	    /// <summary>
	    /// Deletes rentalorder from the database by the given dto object.
	    /// </summary>
	    /// <param name="rentalorder">The dto object.</param>
	    public void DeleteRentalOrder(RentalOrderDto rentalorder)
	    {
	        this.RentalOrderService.Delete(rentalorder);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete rentalorders from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rentalorders">The dto object list.</param>
	    public void DeleteRentalOrders(IEnumerable<RentalOrderDto> rentalorders)
	    {
	        if (rentalorders == null)
	        {
	            return;
	        }
	
	        foreach (RentalOrderDto rentalorder in rentalorders)
	        {
	            if (rentalorder == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRentalOrder(rentalorder);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against RentalRate entity.
	    /// </summary>
	    private IRentalRateService rentalrateservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against RentalRate entity.
	    /// </summary>
	    public virtual IRentalRateService RentalRateService
	    {
	        get
	        {
	            if (this.rentalrateservice == null)
	            {
	                IRentalRateAssembler assembler = new RentalRateAssembler();
	                IRentalRateRepository repository = new RentalRateRepository(this.UnitOfWork);
	
	                this.rentalrateservice = new RentalRateService(assembler, repository);
	            }
	            return this.rentalrateservice;
	        }
	    }
	        
	    #region RentalRates CRUD Operations
	
	    /// <summary>
	    /// Returns all rentalrates.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RentalRateDto> ReadRentalRates()	
	    {
	        return this.RentalRateService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rentalrates from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RentalRateDto> ReadRentalRatesPaged(int startIndex, int pageSize)
	    {
	        return this.RentalRateService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all rentalrates filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RentalRateDto> ReadRentalRatesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RentalRateService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rentalrates from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RentalRateDto> ReadRentalRatesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RentalRateService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a rentalrate with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RentalRateDto ReadRentalRate(string dtoKey)
	    {
	        return this.RentalRateService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all rentalrates count.
	    /// </summary>
	    /// <returns></returns>
	    public int RentalRatesCount()
	    {
	        return this.RentalRateService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all rentalrates count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RentalRatesCountFiltered(string filterExpression)
	    {
	        return this.RentalRateService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new rentalrate from the given dto object into the database.
	    /// </summary>
	    /// <param name="rentalrate">The dto object.</param>
	    /// <returns>The dto key of the newly created rentalrate.</returns>
	    public string CreateRentalRate(RentalRateDto rentalrate)
	    {
	        string key = this.RentalRateService.Add(rentalrate);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing rentalrate in the database from the given dto object.
	    /// </summary>
	    /// <param name="rentalrate">The dto object.</param>
	    public void UpdateRentalRate(RentalRateDto rentalrate)
	    {
	        this.RentalRateService.Update(rentalrate);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update rentalrates in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rentalrates">The dto object list.</param>
	    public void UpdateRentalRates(IEnumerable<RentalRateDto> rentalrates)
	    {
	        if (rentalrates == null)
	        {
	            return;
	        }
	
	        foreach (RentalRateDto rentalrate in rentalrates)
	        {
	            if (rentalrate == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRentalRate(rentalrate);
	        }
	    }
	
	    /// <summary>
	    /// Deletes rentalrate from the database by the given dto object.
	    /// </summary>
	    /// <param name="rentalrate">The dto object.</param>
	    public void DeleteRentalRate(RentalRateDto rentalrate)
	    {
	        this.RentalRateService.Delete(rentalrate);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete rentalrates from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rentalrates">The dto object list.</param>
	    public void DeleteRentalRates(IEnumerable<RentalRateDto> rentalrates)
	    {
	        if (rentalrates == null)
	        {
	            return;
	        }
	
	        foreach (RentalRateDto rentalrate in rentalrates)
	        {
	            if (rentalrate == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRentalRate(rentalrate);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// EntitiesModelService finalizer.
	    /// </summary>
	    ~EntitiesModelService()
	    {
	        IDisposable context = this.unitOfWork as IDisposable;
	        if(context != null)
	        {
	            context.Dispose();
	        }
	    }
	}
}
#pragma warning restore 1591
