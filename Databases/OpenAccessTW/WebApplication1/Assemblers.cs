#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace WebApplication1.Assemblers
{
	using Telerik.OpenAccess;
	using WebApplication1.Dto;
	using WebApplication1.Converters;
	using OpenAccessModel9;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

			
	public partial interface IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    TDto Assemble(TEntity entity);
	    TEntity Assemble(TEntity entity, TDto dto);
	
	    IEnumerable<TDto> Assemble(IEnumerable<TEntity> entityList);
	    IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList);
	}
	
	public abstract class Assembler<TDto, TEntity> : IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    public abstract TDto Assemble(TEntity domainEntity);
	    public abstract TEntity Assemble(TEntity entity, TDto dto);
	
	    public void AssembleNavigational(TEntity entity, TDto dto)
	    {
	    	this.AssembleReferences(entity, dto);
	    	this.AssembleCollections(entity, dto);
	    }
	
	    public abstract void AssembleReferences(TEntity entity, TDto dto);
	    public abstract void AssembleCollections(TEntity entity, TDto dto);
	
	
	    public virtual IEnumerable<TDto> Assemble(IEnumerable<TEntity> domainEntityList)
	    {
	        List<TDto> dtos = Activator.CreateInstance<List<TDto>>();
	        foreach (TEntity domainEntity in domainEntityList)
	        {
	            dtos.Add(Assemble(domainEntity));
	        }
	        return dtos;
	    }
	
	    public virtual IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList)
	    {
	        List<TEntity> domainEntities = Activator.CreateInstance<List<TEntity>>();
	        foreach (TDto dto in dtoList)
	        {
	            domainEntities.Add(Assemble(null, dto));
	        }
	        return domainEntities;
	    }
	}
	
	public partial interface IRentalRateAssembler : IAssembler<RentalRateDto, RentalRate>
	{ 
	
	}
	
	public partial class RentalRateAssemblerBase : Assembler<RentalRateDto, RentalRate>
	{
		/// <summary>
	    /// Invoked after the RentalRateDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="RentalRateDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(RentalRateDto dto);
	
		/// <summary>
	    /// Invoked after the RentalRate instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="RentalRate"/> instance.</param>
		partial void OnEntityAssembled(RentalRate entity);
		
	    public override RentalRate Assemble(RentalRate entity, RentalRateDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new RentalRate();
	        }
			
			entity.RentalRateID = dto.RentalRateID;
			entity.CategoryID = dto.CategoryID;
			entity.Daily = dto.Daily;
			entity.Weekly = dto.Weekly;
			entity.Monthly = dto.Monthly;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override RentalRateDto Assemble(RentalRate entity)
	    {
	        RentalRateDto dto = new RentalRateDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.RentalRateID = entity.RentalRateID;
			dto.CategoryID = entity.CategoryID;
			dto.Daily = entity.Daily;
			dto.Weekly = entity.Weekly;
			dto.Monthly = entity.Monthly;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(RentalRate entity, RentalRateDto dto)
	    {
			CategoryAssembler categoryAssembler = new CategoryAssembler();
			dto.Category = categoryAssembler.Assemble(entity.Category);

	    }
	
	    public override void AssembleCollections(RentalRate entity, RentalRateDto dto)
	    {
	    }
	
	}
	
	
	public partial class RentalRateAssembler : RentalRateAssemblerBase, IRentalRateAssembler
	{
	    
	}
	
	public partial interface IRentalOrderAssembler : IAssembler<RentalOrderDto, RentalOrder>
	{ 
	
	}
	
	public partial class RentalOrderAssemblerBase : Assembler<RentalOrderDto, RentalOrder>
	{
		/// <summary>
	    /// Invoked after the RentalOrderDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="RentalOrderDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(RentalOrderDto dto);
	
		/// <summary>
	    /// Invoked after the RentalOrder instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="RentalOrder"/> instance.</param>
		partial void OnEntityAssembled(RentalOrder entity);
		
	    public override RentalOrder Assemble(RentalOrder entity, RentalOrderDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new RentalOrder();
	        }
			
			entity.RentalOrderID = dto.RentalOrderID;
			entity.DateProcessed = dto.DateProcessed;
			entity.EmployeeID = dto.EmployeeID;
			entity.CustomerID = dto.CustomerID;
			entity.CarID = dto.CarID;
			entity.TankLevel = dto.TankLevel;
			entity.MileageStart = dto.MileageStart;
			entity.MileageEnd = dto.MileageEnd;
			entity.RentStartDate = dto.RentStartDate;
			entity.RentEndDate = dto.RentEndDate;
			entity.Days = dto.Days;
			entity.RateApplied = dto.RateApplied;
			entity.OrderTotal = dto.OrderTotal;
			entity.OrderStatus = dto.OrderStatus;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override RentalOrderDto Assemble(RentalOrder entity)
	    {
	        RentalOrderDto dto = new RentalOrderDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.RentalOrderID = entity.RentalOrderID;
			dto.DateProcessed = entity.DateProcessed;
			dto.EmployeeID = entity.EmployeeID;
			dto.CustomerID = entity.CustomerID;
			dto.CarID = entity.CarID;
			dto.TankLevel = entity.TankLevel;
			dto.MileageStart = entity.MileageStart;
			dto.MileageEnd = entity.MileageEnd;
			dto.RentStartDate = entity.RentStartDate;
			dto.RentEndDate = entity.RentEndDate;
			dto.Days = entity.Days;
			dto.RateApplied = entity.RateApplied;
			dto.OrderTotal = entity.OrderTotal;
			dto.OrderStatus = entity.OrderStatus;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(RentalOrder entity, RentalOrderDto dto)
	    {
			CarAssembler carAssembler = new CarAssembler();
			dto.Car = carAssembler.Assemble(entity.Car);

			CustomerAssembler customerAssembler = new CustomerAssembler();
			dto.Customer = customerAssembler.Assemble(entity.Customer);

			EmployeeAssembler employeeAssembler = new EmployeeAssembler();
			dto.Employee = employeeAssembler.Assemble(entity.Employee);

	    }
	
	    public override void AssembleCollections(RentalOrder entity, RentalOrderDto dto)
	    {
	    }
	
	}
	
	
	public partial class RentalOrderAssembler : RentalOrderAssemblerBase, IRentalOrderAssembler
	{
	    
	}
	
	public partial interface IEmployeeAssembler : IAssembler<EmployeeDto, Employee>
	{ 
	
	}
	
	public partial class EmployeeAssemblerBase : Assembler<EmployeeDto, Employee>
	{
		/// <summary>
	    /// Invoked after the EmployeeDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="EmployeeDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(EmployeeDto dto);
	
		/// <summary>
	    /// Invoked after the Employee instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Employee"/> instance.</param>
		partial void OnEntityAssembled(Employee entity);
		
	    public override Employee Assemble(Employee entity, EmployeeDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Employee();
	        }
			
			entity.EmployeeID = dto.EmployeeID;
			entity.EmployeeNumber = dto.EmployeeNumber;
			entity.FirstName = dto.FirstName;
			entity.LastName = dto.LastName;
			entity.FullName = dto.FullName;
			entity.Title = dto.Title;
			entity.HourlySalary = dto.HourlySalary;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override EmployeeDto Assemble(Employee entity)
	    {
	        EmployeeDto dto = new EmployeeDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EmployeeID = entity.EmployeeID;
			dto.EmployeeNumber = entity.EmployeeNumber;
			dto.FirstName = entity.FirstName;
			dto.LastName = entity.LastName;
			dto.FullName = entity.FullName;
			dto.Title = entity.Title;
			dto.HourlySalary = entity.HourlySalary;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Employee entity, EmployeeDto dto)
	    {
	    }
	
	    public override void AssembleCollections(Employee entity, EmployeeDto dto)
	    {
			RentalOrderAssembler rentalOrderAssembler = new RentalOrderAssembler();

			dto.RentalOrders = new List<RentalOrderDto>();
			foreach (RentalOrder item in entity.RentalOrders)
			{
				var dtoItem = rentalOrderAssembler.Assemble(item);
				dtoItem.Employee = dto;
				dto.RentalOrders.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class EmployeeAssembler : EmployeeAssemblerBase, IEmployeeAssembler
	{
	    
	}
	
	public partial interface ICustomerAssembler : IAssembler<CustomerDto, Customer>
	{ 
	
	}
	
	public partial class CustomerAssemblerBase : Assembler<CustomerDto, Customer>
	{
		/// <summary>
	    /// Invoked after the CustomerDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="CustomerDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(CustomerDto dto);
	
		/// <summary>
	    /// Invoked after the Customer instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Customer"/> instance.</param>
		partial void OnEntityAssembled(Customer entity);
		
	    public override Customer Assemble(Customer entity, CustomerDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Customer();
	        }
			
			entity.CustomerID = dto.CustomerID;
			entity.DrvLicNumber = dto.DrvLicNumber;
			entity.FullName = dto.FullName;
			entity.Address = dto.Address;
			entity.Country = dto.Country;
			entity.City = dto.City;
			entity.State = dto.State;
			entity.ZIPCode = dto.ZIPCode;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override CustomerDto Assemble(Customer entity)
	    {
	        CustomerDto dto = new CustomerDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CustomerID = entity.CustomerID;
			dto.DrvLicNumber = entity.DrvLicNumber;
			dto.FullName = entity.FullName;
			dto.Address = entity.Address;
			dto.Country = entity.Country;
			dto.City = entity.City;
			dto.State = entity.State;
			dto.ZIPCode = entity.ZIPCode;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Customer entity, CustomerDto dto)
	    {
	    }
	
	    public override void AssembleCollections(Customer entity, CustomerDto dto)
	    {
			RentalOrderAssembler rentalOrderAssembler = new RentalOrderAssembler();

			dto.RentalOrders = new List<RentalOrderDto>();
			foreach (RentalOrder item in entity.RentalOrders)
			{
				var dtoItem = rentalOrderAssembler.Assemble(item);
				dtoItem.Customer = dto;
				dto.RentalOrders.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class CustomerAssembler : CustomerAssemblerBase, ICustomerAssembler
	{
	    
	}
	
	public partial interface ICategoryAssembler : IAssembler<CategoryDto, Category>
	{ 
	
	}
	
	public partial class CategoryAssemblerBase : Assembler<CategoryDto, Category>
	{
		/// <summary>
	    /// Invoked after the CategoryDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="CategoryDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(CategoryDto dto);
	
		/// <summary>
	    /// Invoked after the Category instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Category"/> instance.</param>
		partial void OnEntityAssembled(Category entity);
		
	    public override Category Assemble(Category entity, CategoryDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Category();
	        }
			
			entity.CategoryID = dto.CategoryID;
			entity.CategoryName = dto.CategoryName;
			entity.ImageFileName = dto.ImageFileName;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override CategoryDto Assemble(Category entity)
	    {
	        CategoryDto dto = new CategoryDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CategoryID = entity.CategoryID;
			dto.CategoryName = entity.CategoryName;
			dto.ImageFileName = entity.ImageFileName;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Category entity, CategoryDto dto)
	    {
	    }
	
	    public override void AssembleCollections(Category entity, CategoryDto dto)
	    {
			RentalRateAssembler rentalRateAssembler = new RentalRateAssembler();

			dto.RentalRates = new List<RentalRateDto>();
			foreach (RentalRate item in entity.RentalRates)
			{
				var dtoItem = rentalRateAssembler.Assemble(item);
				dtoItem.Category = dto;
				dto.RentalRates.Add(dtoItem);
			}

			CarAssembler carAssembler = new CarAssembler();

			dto.Cars = new List<CarDto>();
			foreach (Car item in entity.Cars)
			{
				var dtoItem = carAssembler.Assemble(item);
				dtoItem.Category = dto;
				dto.Cars.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class CategoryAssembler : CategoryAssemblerBase, ICategoryAssembler
	{
	    
	}
	
	public partial interface ICarAssembler : IAssembler<CarDto, Car>
	{ 
	
	}
	
	public partial class CarAssemblerBase : Assembler<CarDto, Car>
	{
		/// <summary>
	    /// Invoked after the CarDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="CarDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(CarDto dto);
	
		/// <summary>
	    /// Invoked after the Car instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Car"/> instance.</param>
		partial void OnEntityAssembled(Car entity);
		
	    public override Car Assemble(Car entity, CarDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Car();
	        }
			
			entity.CarID = dto.CarID;
			entity.TagNumber = dto.TagNumber;
			entity.Make = dto.Make;
			entity.Model = dto.Model;
			entity.CarYear = dto.CarYear;
			entity.CategoryID = dto.CategoryID;
			entity.Mp3Player = dto.Mp3Player;
			entity.DVDPlayer = dto.DVDPlayer;
			entity.AirConditioner = dto.AirConditioner;
			entity.ABS = dto.ABS;
			entity.ASR = dto.ASR;
			entity.Navigation = dto.Navigation;
			entity.Available = dto.Available;
			entity.Latitude = dto.Latitude;
			entity.Longitude = dto.Longitude;
			entity.ImageFileName = dto.ImageFileName;
			entity.Rating = dto.Rating;
			entity.NumberOfRatings = dto.NumberOfRatings;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override CarDto Assemble(Car entity)
	    {
	        CarDto dto = new CarDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CarID = entity.CarID;
			dto.TagNumber = entity.TagNumber;
			dto.Make = entity.Make;
			dto.Model = entity.Model;
			dto.CarYear = entity.CarYear;
			dto.CategoryID = entity.CategoryID;
			dto.Mp3Player = entity.Mp3Player;
			dto.DVDPlayer = entity.DVDPlayer;
			dto.AirConditioner = entity.AirConditioner;
			dto.ABS = entity.ABS;
			dto.ASR = entity.ASR;
			dto.Navigation = entity.Navigation;
			dto.Available = entity.Available;
			dto.Latitude = entity.Latitude;
			dto.Longitude = entity.Longitude;
			dto.ImageFileName = entity.ImageFileName;
			dto.Rating = entity.Rating;
			dto.NumberOfRatings = entity.NumberOfRatings;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Car entity, CarDto dto)
	    {
			CategoryAssembler categoryAssembler = new CategoryAssembler();
			dto.Category = categoryAssembler.Assemble(entity.Category);

	    }
	
	    public override void AssembleCollections(Car entity, CarDto dto)
	    {
			RentalOrderAssembler rentalOrderAssembler = new RentalOrderAssembler();

			dto.RentalOrders = new List<RentalOrderDto>();
			foreach (RentalOrder item in entity.RentalOrders)
			{
				var dtoItem = rentalOrderAssembler.Assemble(item);
				dtoItem.Car = dto;
				dto.RentalOrders.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class CarAssembler : CarAssemblerBase, ICarAssembler
	{
	    
	}
}
#pragma warning restore 1591
